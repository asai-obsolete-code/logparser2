#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#

(load "common.lisp")
(load "plot-common.lisp")
(in-package :ros.script.plot)
(cl-syntax:use-syntax :cl-interpol)

(defun main (&rest args)
  (declare (ignorable args))
  (my-connect "db.sqlite")
  (format t "
\\documentclass[10pt,letterpaper]{article}
\\usepackage{aaai}
\\usepackage[paperwidth=100cm,paperheight=100cm]{geometry}
\\usepackage{times}
\\usepackage{helvet}
\\usepackage{courier}
\\usepackage{amsmath}
\\usepackage{amssymb}
\\usepackage{xspace}
\\usepackage{relsize}
\\usepackage{graphicx}
\\usepackage{multirow}
\\usepackage[normalem]{ulem}
\\usepackage{url}
\\begin{document}
\\nocopyright
\\begin{figure*}[htbp]
")
  (princ (make-table (as-array (data) 3)))
  (format t "
\\end{figure*}
\\end{document}"))

(defun solved ()
  (select (:algorithm_id :default_tiebreaking_id :heuristics_id :queue_id :ipcyear_id :domain_id :date :problem
           (:as (:/ (:max :plan_length 0) :plan_length) :solved))
    (from :experiment)))

(defun coverage ()
  (select (:algorithm_id :default_tiebreaking_id :heuristics_id :queue_id :ipcyear_id :domain_id :date
           (:as (:sum :solved) :coverage))
    (from (solved))
    (group-by :algorithm_id :default_tiebreaking_id :heuristics_id :queue_id :ipcyear_id :domain_id :date)))

(defun samples-and-mean ()
  (select (:algorithm_id :default_tiebreaking_id :heuristics_id :queue_id :ipcyear_id :domain_id
                         (:as (:count (:distinct :date)) :samples)
                         (:as (:avg :coverage) :mean))
    (from (coverage))
    (group-by :algorithm_id :default_tiebreaking_id :heuristics_id :queue_id :ipcyear_id :domain_id)))

(defun mean-and-variance ()
  (select (:algorithm_id :default_tiebreaking_id :heuristics_id :queue_id :domain_id
                         :ipcyear_id
                         :mean
                         (:as (:/ (:sum (:* (:- :coverage :mean)
                                            (:- :coverage :mean)))
                                  (:- :samples 1))
                              :var))
    (from (coverage))
    (left-join (:as (samples-and-mean) :sm)
               :using
               (:algorithm_id :default_tiebreaking_id :heuristics_id :queue_id :ipcyear_id :domain_id))
    (group-by :algorithm_id :default_tiebreaking_id :heuristics_id :queue_id :ipcyear_id :domain_id)
    (order-by :algorithm_id :default_tiebreaking_id :heuristics_id :queue_id :ipcyear_id :domain_id)))

(defun data ()
  (retrieve-by-sql
   (mean-and-variance)))

(defun as-array (data content-dim)
  (let* ((label-dim (- (/ (length (first data)) 2) content-dim))
         (table (make-array (make-list label-dim :initial-element 0)
                            :adjustable t)))
    (iter (for datum in data)
          (for dims = (iter (for d in (cdr datum) by #'cddr)
                            (for i below label-dim)
                            (collect d)))
          (for maxdims = (mapcar #'max dims (array-dimensions table)))
          (unless (equal maxdims (array-dimensions table))
            (setf table (adjust-array table maxdims)))
          (setf (apply #'aref table (mapcar #'1- dims))
                (nthcdr (* 2 label-dim) datum)))
    table))

;; :algorithm_id :default_tiebreaking_id :heuristics_id :queue_id :domain_id
;; :ipcyear_id mean var

(defun multicolumn (n string &optional (column "|c|"))
  #?"\\multicolumn{${n}}{${column}}{${string}}")
(defun pm (mean sd)
  (declare (ignorable mean sd))
  (format nil "~3f" mean)
  ;; (format nil "$~3f\\pm~3f$" mean sd)
  )
(defun tabular (n str)
  (format nil "\\begin{tabular}{|*{~a}{c|}}
~a
\\end{tabular}" n str))
(defun join-& (&rest args)
  (format nil "~{~a~^&~}" args))

(defun make-table (table)
  (match table
    ((array :dimensions (list a dt h q d))
     (iter outer
           (for _a below a)
           (when (first-time-p)
             (collect
              (iter (with d0 = 0)
                    (for _d below d)
                    (for cell = (aref table 0 0 0 0 _d))
                    (for pcell previous cell)
                    (match* (pcell cell)
                            (((plist :ipcyear-id year)
                              (plist :ipcyear-id (eq year))) ; because year could be nil
                             (collect (%n (1+ _d) :domain)))
                            ((_ (plist :ipcyear-id year))
                             (collect (format nil "\\hline~%~a" (%n year :ipcyear)))
                             (collect (format nil "\\hline~%~a" (%n (1+ _d) :domain)))
                             (setf d0 _d))))
              into columns))
           (in outer (collect (multicolumn (* dt h q) (%n (1+ _a) :algorithm)) into algos))
     (iter (for _dt below dt)
           (in outer (collect (multicolumn (* h q) (%n (1+ _dt) :default_tiebreaking)) into dts))
     (iter (for _h below h)
           (in outer (collect (multicolumn q (%n (1+ _h) :heuristics)) into hs))
     (iter (for _q below q)
           (in outer (collect (%n (1+ _q) :queue) into qs))
           (in outer (collect
                         (iter (with d0 = 0)
                               (for _d below d)
                               (for cell = (aref table _a _dt _h _q _d))
                               (for pcell previous cell)
                               (match* (pcell cell)
                                       (((plist :ipcyear-id year)
                                         (plist :ipcyear-id (eq year) :mean mean :var var))
                                        (collect (pm mean var)))
                                       ((_
                                         (plist :ipcyear-id year :mean mean :var var))
                                        (collect
                                         (format nil "~3f"
                                                 (iter (for __d from _d below d)
                                                       (ematch (aref table _a _dt _h _q __d)
                                                         ((plist :ipcyear-id _year :mean mean)
                                                          (while (= year _year))
                                                          (summing mean))))))
                                        (collect (pm mean var))
                                        (setf d0 _d))))
                       into columns)))))
     (finally
      (return-from outer
        (tabular (1+ (* a dt h q))      ; 1+ column header
                 (format nil "~{~a\\\\~^\\hline~%~}~%~{~a\\\\~%~}\\hline"
                         (list (apply #'join-& "Algorithm" algos)
                               (apply #'join-& "\\textit{default}" dts)
                               (apply #'join-& "$h$" hs)
                               (apply #'join-& "Tiebreak" qs))
                         (apply #'mapcar #'join-& columns)))))))))
