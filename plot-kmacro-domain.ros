#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#

(load "common.lisp")
(load "plot-common.lisp")
(in-package :ros.script.plot)
(cl-syntax:use-syntax :cl-interpol)

(defun futures ()
  (iter outer
        (for measure in '(:evaluation :expansion :generation))
        (iter (for config in
                   (retrieve-by-sql
                    (select (:algorithm_id :heuristics_id :tag_id :domain.id :domain.name)
                      (from :fig3 :domain)
                      (where (:and (:!= :tag_id base) (:= :fig3.domain_id :domain.id)))
                      (group-by :algorithm_id :heuristics_id :tag_id :domain.id))))
              (task measure config))))

(defun task (measure config &aux improved? sum-improved?)
  (match config
    ((list _ alg _ h _ tag _ d _ dname)
     (when-let
         ((plotters
           (iter (for length in '(2 5 8))
                 (when-let ((data (retrieve-by-sql
                                   (select (list (make-keyword (symbolicate :base. measure))
                                                 (make-keyword (symbolicate :macro. measure)))
                                     (from (:as :fig2 :base) (:as :fig3 :macro))
                                     (where
                                      (:and (:= :base.problem :macro.problem)
                                            (:= :base.domain_id :macro.domain_id)
                                            (:= :base.domain_id d)
                                            (:= :base.heuristics_id h)
                                            (:= :macro.heuristics_id h)
                                            (:= :base.algorithm_id alg)
                                            (:= :macro.algorithm_id alg)
                                            (:= :base.tag_id base)
                                            (:= :macro.tag_id tag)
                                            (:= :macro.length length)))))))
                   (match data
                     ((data improved both sum-x sum-y)
                      (when (< both (* 2 improved)) (setf improved? t))
                      (when (< sum-y sum-x) (setf sum-improved? t))
                      (collect
                          (lambda ()
                            (plot (lambda ()
                                    (iter (for (_2 x _3 y) in data)
                                          (format *stream* "~&~a ~a" (correct x) (correct y))))
                                  :title dname)))))))))
       (handler-case
           (with-plots (*stream*)
             (setup #?"${(%n alg :algorithm)} ${(%n h :heuristics)} ${measure} ${(%n tag :tag)}"
                    #?"${measure}/${dname}/${(%n tag :tag)}-${(%n alg :algorithm)}-${(%n h :heuristics)}.svg"
                    sum-improved?)
             (plot "x" :title "y=x")
             (mapcar #'funcall plotters))
         (error (c)
           (describe c)))))))


