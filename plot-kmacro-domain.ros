#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#

(load "common.lisp")
(load "plot-common.lisp")
(in-package :ros.script.plot)
(cl-syntax:use-syntax :cl-interpol)

(defmacro tprint (&body body)
  `(print (time (progn ,@body))))

(defun futures ()
  (trace task)
  #+nil
  (tprint
    (retrieve-by-sql
     (select (:algorithm.id :heuristics.id :tag.id)
             (from :algorithm :heuristics :tag)
             (where (:and (:!= :tag_id (%id "base" :tag))
                          (:or (:= :algorithm.id :heuristics.id)
                               (:and (:!= :algorithm.id (%id "probe" :algorithm))
                                     (:!= :algorithm.id (%id "mp" :algorithm)))))))))
  (iter outer
        (for measure in '(:evaluation :expansion :generation))
        (iter (for config in
                   (tprint
                     (retrieve-by-sql
                      (select (:algorithm_id :heuristics_id :tag_id)
                              (from :fig3)
                              (where (:!= :tag_id (%id "base" :tag)))
                              (group-by :algorithm_id :heuristics_id :tag_id)))))
              (iter (for length in '(2 5 8))
                    (task measure config length)))))

(defun task (measure config length &aux improved? sum-improved?)
  (match config
    ((list _ alg _ h _ tag)
     (handler-case
         (with-plots (*stream*)
           (setup #?"${(%n alg :algorithm)} ${(%n h :heuristics)} ${measure} ${(%n tag :tag)}"
                  #?"${measure}/${length}/${(%n tag :tag)}-${(%n alg :algorithm)}-${(%n h :heuristics)}"
                  t
                  1)
           (plot "x" :title "y=x")
           (iter (for %d in (retrieve-by-sql (select (:id :name) (from :domain))))
                 (match %d
                   ((list _ d _ dname)
                    (print %d)
                    (when-let ((data (retrieve-by-sql
                                      (select (list (make-keyword (symbolicate :base. measure))
                                                    (make-keyword (symbolicate :macro. measure)))
                                              (from (:as :fig2 :base) (:as :fig3 :macro))
                                              (where
                                               (:and (:= :base.problem :macro.problem)
                                                     (:= :macro.domain_id d)
                                                     (:= :base.domain_id d)
                                                     (:= :base.heuristics_id h)
                                                     (:= :macro.heuristics_id h)
                                                     (:= :base.algorithm_id alg)
                                                     (:= :macro.algorithm_id alg)
                                                     (:= :base.tag_id base)
                                                     (:= :macro.tag_id tag)
                                                     (:= :macro.length length)))))))
                      (match data
                        ((data improved both sum-x sum-y)
                         (when (< both (* 2 improved)) (setf improved? t))
                         (when (< sum-y sum-x) (setf sum-improved? t))
                         (plot (lambda ()
                                 (iter (for (_2 x _3 y) in data)
                                       (format *stream* "~&~a ~a" (correct x) (correct y))))
                               :title #?"${dname} ${improved}/${both}"))))))))
       (uiop:subprocess-error ()
         (format *error-output* #?"subprocess error at ${measure} ${config} ${length}"))))))


