#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#

(load "common.lisp")

(in-package :ros.script.plot)

(defun main (&rest args)
  (declare (ignorable args))
  (connect)
  (iter (for (depth std title xlabel ylabel) in
             '(("lmhiF" "lmh_F" "Node evaluation per seconds (node/sec) with h=LMcut" "[f,h,<d>,fifo]" "[f,h,fifo]")
               ("lmhiL" "lmh_L" "Node evaluation per seconds (node/sec) with h=LMcut" "[f,h,<d>,lifo]" "[f,h,lifo]")
               ("mnhiF" "mnh_F" "Node evaluation per seconds (node/sec) with h=Merge and Shrink"   "[f,h,<d>,fifo]" "[f,h,fifo]")
               ("mnhiL" "mnh_L" "Node evaluation per seconds (node/sec) with h=Merge and Shrink"   "[f,h,<d>,lifo]" "[f,h,lifo]")))
        (for output = (format nil "~a-~a.pdf" depth std))
        (with-plots (*standard-output*)
          (gp-setup :terminal '(:pdf :enhanced :size (5.5 3.6)
                                :dashed
                                ;; :background :rgb "gray80"
                                ;; :monochrome
                                :font "Times New Roman, 12")
                    :size :square
                    :view '(:equal :xy)
                    :xrange :|[1000:400000]|
                    :yrange :|[1000:400000]|
                    :output output
                    :pointsize 0.45
                    :logscale :xy
                    :format '(xy "10^%T")
                    :key '(:rmargin
                           :width -5
                           :height -6
                           :samplen 1
                           :horizontal
                           :maxcols 2
                           :spacing 0.8
                           ;; :vertical
                           ;; :maxrows 30
                           :font "Times New Roman, 12"
                           )
                    :title title
                    :xlabel xlabel
                    :ylabel ylabel)
          (plot "x" :title "y=x")
          (iter (for a from -1 to 1)
                (unless (zerop a)
                  (plot (format nil "~a*x" (float (expt 2 a)))
                        :title (format nil "y=~a*x" (expt 2 a))
                        :lt 3
                        )))
          (main2 depth std))))

(defun main2 (depth std)
  (iter (for d in (retrieve-by-sql (select ((:distinct :domain)) (from :experiment))))
        (ematch d
          ((list :domain d)
           (plot (lambda ()
                   (main3 depth std d))
                 :title (match (ppcre:split "-" d)
                          ((list* x y _)
                           (format nil "~{~a~^-~}" (list x y)))
                          ((list x)
                           x)))))))

(defun main3 (depth std d)
  (iter (for x in (select-dao 'experiment
                    (where (:and (:= :configuration depth)
                                 (:= :domain d)))
                    (order-by :problem)))
        (for y in (select-dao 'experiment
                    (where (:and (:= :configuration std)
                                 (:= :domain d)))
                    (order-by :problem)))
        (ematch* (x y)
          (((experiment :sec s1 :evaluation e1 :problem p1)
            (experiment :sec s2 :evaluation e2 :problem p2))
           (assert (string= p1 p2))
           (ignore-errors
             (row (float (/ e1 s1)) (float (/ e2 s2))))))))

;; (select-dao 'experiment (where (:= :configuration "lmhiF")))
;;; vim: set ft=lisp lisp:
