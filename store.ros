#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#

;;;;

(load "common.lisp")
(load "store.lisp")
(in-package :ros.script.plot)

(defun parse-pathname (file)
  (ematch file
    ;; FD-based 
    ((pathname :directory (last 3
                                (split "-" "fig3" (read length) tag)
                                (split* "-" (ipcyear ipcyear) _)
                                domain)
               :name      (split* "\\." (problem problem)
                                  (ppcre "(..1)([el]p?)([0-9]*)" heuristics algorithm (read seed)) _))
     (list* 'fig3 (initargs tag domain problem ipcyear heuristics algorithm length seed)))
    ;; mp, probe
    ((pathname :directory (last 3
                                (split "-" "fig3" (read length) tag)
                                (split* "-" (ipcyear ipcyear) _)
                                domain)
               :name      (split* "\\." (problem problem)
                                  (ppcre "(mp|probe)([0-9]*)" algorithm (read seed)) _))
     (let ((heuristics algorithm))
       (list* 'fig3 (initargs tag domain problem ipcyear heuristics algorithm length seed))))
    ((pathname :directory (last 3
                                (split "-" "fig2" tag)
                                (split* "-" (ipcyear ipcyear) _)
                                domain)
               :name      (split* "\\." (problem problem)
                                  (ppcre "(..1)([el]p?)" heuristics algorithm) _))
     (list* 'fig2 (initargs tag domain problem ipcyear heuristics algorithm)))
    ((pathname :directory (last 3
                                (split "-" "fig2" tag)
                                (split* "-" (ipcyear ipcyear) _)
                                domain)
               :name      (split* "\\." (problem problem)
                                  (ppcre "(mp|probe|tran)" algorithm) _))
     (let ((heuristics algorithm))
       (list* 'fig2 (initargs tag domain problem ipcyear heuristics algorithm))))))

(defun main (&rest args)
  (declare (ignore args))
  (my-connect "db.sqlite")
  (set-pragma)
  (mapcar #'ensure-table-exists '(tag domain algorithm heuristics fig2 fig3))
  (setf *kernel* (make-kernel (read-from-string (uiop:run-program "grep processor /proc/cpuinfo | wc -l" :output :string))))
  (let ((t1 (get-internal-real-time))
        (channel (make-channel)))
    (time
     (map nil #'receive-result
          (iter (for file in-stream *standard-input* using #'read-line)
                (submit-task channel (with-forced-lex (file)
                                       (lambda ()
                                         (update-dao (parse (pathname file) #'parse-pathname))))))))
    (let ((duration (float (/ (- (get-internal-real-time) t1) internal-time-units-per-second))))
      (format t "~%--------- ~a seconds for ~a inserts: ~a inserts/sec.~%"
              duration (length results) (/ (length results)
                                           (max duration (/ internal-time-units-per-second)))))))
