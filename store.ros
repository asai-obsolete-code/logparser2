#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#

;;;;

(load "common.lisp")
(in-package :ros.script.plot)
(declaim (optimize (debug 3) (speed 0)))
(lispn:define-namespace parser)

;;;; parsers

(defpattern last (n &rest subpatterns)
  (check-type n integer)
  (assert (= n (length subpatterns)))
  (with-gensyms (it)
    `(guard1 (,it :type list) (listp ,it)
             (last ,it ,n)
             (list ,@subpatterns))))

(defpattern read (n)
  `(access #'read-from-string ,n))

(defpattern split (regex &rest subpatterns)
  (with-gensyms (it)
    `(guard1 (,it :type string) (stringp ,it)
             (ppcre:split ,regex ,it)
             (list ,@subpatterns))))
(defpattern split* (regex &rest subpatterns)
  (with-gensyms (it)
    `(guard1 (,it :type string) (stringp ,it)
             (ppcre:split ,regex ,it)
             (list* ,@subpatterns))))

(defmacro defparser (name args &body body)
  `(setf (symbol-parser ',name) (sb-int:named-lambda ,name ,args ,@body)))

(defvar *local*)                        ; a hashtable
(defun local (name &optional default)
  (ensure-gethash name *local* default))
(defun (setf local) (newval name &optional default)
  (ensure-gethash name *local* default)
  (setf (gethash name *local*) newval))

(defparser expansion (line)
  (match line
    ((ppcre "Expanded ([0-9]*) state" (read num))
     num)))

(defparser evaluation (line)
  (match line
    ((ppcre "Evaluated ([0-9]*) state" (read num))
     num)))

(defparser search (line)
  (match line
    ((ppcre "Actual search time: ([.0-9]*) " (read num))
     num)))

(defparser generation (line)
  (match line
    ((ppcre "Generated ([0-9]*) state" (read num))
     num)))

(defparser plan-length (line)
  (match line
    ((ppcre "Plan length: ([0-9]*) step" (read n))
     n)))

(defparser plan-cost (line)
  (match line
    ((ppcre "Plan cost: *([0-9]*)" (read n))
     n)))

#+nil
(defparser seed (line)
  (match line
    ((ppcre "\"--seed\" \"([0-9]*)\"" (read seed))
     seed)))

(defparser macros (line)
  (match line
    ((ppcre "with ([0-9]*) macros" (read n))
     n)))

(defparser macros2 (line)
  "macros with length > 2"
  (match line
    ((ppcre "... ([0-9]*) remaining." (read n))
     ;; (t=0)    Filtering null macros.
     ;; (t=0)    ... 2815 remaining.
     ;; (t=0)    Filtering macros with length 1.
     ;; (t=0)    ... 2815 remaining.
     ;; the last one is the intended value
     (setf (local :macros2 0) n)
     nil)))

(defparser usedmacros (line)
  "Plan 0 Decoding action JUNK-BOARD-MOVE-DOWN-FAST44223"
  (match line
    ((ppcre "Decoding action (.*)" (read name))
     ;; (push name (local :usedmacros-names nil))
     (incf (local :usedmacros 0))
     nil)))

(defparser memory (line)
  (match line
    ((ppcre "MAXMEM_RSS (-?[0-9]*)" (read mem))
     (maxf (local :memory -1) mem)
     nil)))

;;;; main

(defun make-instance* (name &rest args)
  (or (apply #'find-dao name args)
      (apply #'make-instance name args)))

(defun parse (file)
  (apply #'reinitialize-instance
         (apply #'make-instance*
                (parse-pathname file))
         (parse-output file)))

(defun parse-output (file)
  (let ((*local* (make-hash-table)))
    (append (iter outer
                  (for line in-file file using #'read-line)
                  (iter (for (key fn) in-hashtable *parser-table*)
                        (in outer
                            (when-let ((it (funcall fn line)))
                              (collect (make-keyword key))
                              (collect it)))))
            (iter outer
                  (for line in-file (make-pathname :type "err" :defaults file) using #'read-line)
                  (iter (for (key fn) in-hashtable *parser-table*)
                        (in outer
                            (when-let ((it (funcall fn line)))
                              (collect (make-keyword key))
                              (collect it)))))
            (hash-table-plist *local*))))

(defmacro initargs (&rest args)
  `(list ,@(mappend (lambda (x) (list (make-keyword x) x)) args)))
(defun parse-pathname (file)
  (ematch file
    ((pathname :directory (last 3
                                (split "-" "fig3" (read length) tag)
                                (split* "-" ipcyear ipctrack _)
                                domain)
               :name      (split* "\\." problem config+seednum _)
               :type      "out")
     (let* ((l (length config+seednum))
            (configuration (subseq config+seednum 0 (1- l)))
            (seed   (subseq config+seednum (1- l) l)))
       (list* 'fig3 (initargs tag domain problem ipcyear ipctrack configuration length seed))))
    ((pathname :directory (last 3
                                (split "-" "fig2" tag)
                                (split* "-" ipcyear ipctrack _)
                                domain)
               :name      (split* "\\." problem configuration _)
               :type      "out")
     (list* 'fig2 (initargs tag domain problem ipcyear ipctrack configuration)))))

(defun call-with-error-decoration (decoration fn)
  (handler-bind ((error (lambda (c)
                          (pprint-logical-block (*error-output* nil :prefix decoration)
                            (pprint-indent :block 2)
                            (signal c)))))
    (funcall fn)))

(defun main (&rest files)
  ;; (sb-profile:profile #.(package-name *package*))
  (my-connect "db.sqlite")
  (ensure-table-exists 'fig2)
  (ensure-table-exists 'fig3)
  ;; (mito:migrate-table 'fig2)
  ;; (mito:migrate-table 'fig3)
  (setf *kernel* (make-kernel 8))
  (mito.logger:with-sql-logging
    (execute-sql
     (sxql:pragma "synchronous" 0))
    (execute-sql
     (sxql:pragma "journal_mode" "persist")))
  (progn
    (dbi:with-transaction *connection*
      (map nil #'save-dao
           (pmapcar (lambda (file)
                      (call-with-error-decoration
                       (format nil "~&while parsing metadata for ~a:" file)
                       (lambda () (parse (pathname file)))))
                    files)))))
