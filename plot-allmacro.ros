#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#

(load "common.lisp")
(load "plot-common.lisp")
(in-package :ros.script.plot)
(cl-syntax:use-syntax :cl-interpol)

(defun futures ()
  (iter outer
        (for measure in '(:evaluation :expansion :generation))
        (iter (for config in
                   (retrieve-by-sql
                      (select (:algorithm_id :heuristics_id)
                        (from :fig2)
                        (group-by :algorithm_id :heuristics_id))))
              (in outer
                  (collect
                      (with-forced-lex (measure config)
                        (future (task measure config))))))))

(defun task (measure config &aux improved? sum-improved?)
  (match config
    ((list _ alg _ h)
     (when-let ((data (retrieve-by-sql
                       (select (list (make-keyword (symbolicate :base. measure))
                                     (make-keyword (symbolicate :macro. measure)))
                         (from (:as :fig2 :base) (:as :fig2 :macro))
                         (where
                          (:and (:= :base.problem :macro.problem)
                                (:= :base.domain_id :macro.domain_id)
                                (:= :base.heuristics_id h)
                                (:= :macro.heuristics_id h)
                                (:= :base.algorithm_id alg)
                                (:= :macro.algorithm_id alg)
                                (:= :base.tag_id base)
                                (:= :macro.tag_id (%id "macro" :tag))))))))
       (match data
         ((data improved both nomacro macro sum-x sum-y)
          (when (< both (* 2 improved)) (setf improved? t))
          (when (< sum-y sum-x) (setf sum-improved? t))
          (with-plots (s)
            (setup #?"${(db-symbol-name alg :algorithm)} ${(db-symbol-name h :heuristics)} ${measure}"
                   #?"${measure}/all-${(db-symbol-name alg :algorithm)}-${(db-symbol-name h :heuristics)}.svg"
                   sum-improved?)
            (plot "x" :title "y=x")
            (plot (lambda ()
                    (iter (for (_2 x _3 y) in data)
                          (format s "~&~a ~a" (correct x) (correct y))))
                  :title (replace-newline #?"
${(length data)} in total, solved by (both,nomacro,macro,none)=(${both},${nomacro},${macro},${(- (length data) both nomacro macro)})
${measure} improved by macros in ${improved}/${both} instances
Sum of ${measure}: (nomacro,macro)=(${sum-x},${sum-y})")))))))))


