#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#

(load "common.lisp")
(load "plot-common.lisp")
(in-package :ros.script.plot)
(cl-syntax:use-syntax :cl-interpol)

(defun futures ()
  (iter outer
        (for measure in '(:evaluation :expansion :generation :search))
        (iter (for config in
                   (retrieve-by-sql
                      (select (:algorithm_id :heuristics_id)
                        (from :fig2)
                        (where (:and (:!= :algorithm_id (%id "tran" :algorithm))))
                        (group-by :algorithm_id :heuristics_id))))
              (task measure config))))

(defun task (measure config &aux improved? sum-improved?)
  (match config
    ((list _ alg _ h)
     (when-let ((data (retrieve-by-sql
                       (select (list (make-keyword (symbolicate :base. measure))
                                     (make-keyword (symbolicate :macro. measure)))
                         (from (:as :fig2 :base) (:as :fig2 :macro))
                         (where
                          (:and (:= :base.problem :macro.problem)
                                (:= :base.domain_id :macro.domain_id)
                                (:= :base.heuristics_id h)
                                (:= :macro.heuristics_id h)
                                (:= :base.algorithm_id alg)
                                (:= :macro.algorithm_id alg)
                                (:= :base.tag_id base)
                                (:= :macro.tag_id (%id "macro" :tag))))))))
       (match data
         ((data improved both nomacro macro sum-x sum-y)
          (when (< both (* 2 improved)) (setf improved? t))
          (when (< sum-y sum-x) (setf sum-improved? t))
          (ignore-errors
            (with-plots (s)
              (setup #?"${(db-symbol-name alg :algorithm)} ${(db-symbol-name h :heuristics)} ${measure}"
                     #?"${measure}/all-${(db-symbol-name alg :algorithm)}-${(db-symbol-name h :heuristics)}"
                     :spacing 7)
              (plot (lambda ()
                      (map nil
                           (lambda-match
                            ((list _ x _ y)
                             (when (and (plusp x) (plusp y))
                               (format s "~&~a ~a" x y))))
                           data))
                    :title (replace-newline #?"${(length data)} in total, solved by
(both,nomacro,macro,none)=(${both},${nomacro},${macro},${(- (length data) both nomacro macro)})
${measure} improved by macros: ${improved}/${both}
Sum of ${measure}: (nomacro,macro)=(${sum-x},${sum-y})"))
              (plot "x" :title "y=x")))))))))


